\begin{Verbatim}[commandchars=\\\{\}]
\PYG{x}{def check\PYGZus{}side\PYGZus{}pixels(self, mask):}
\PYG{x}{    onLeft = False}
\PYG{x}{    onRight = False}
\PYG{x}{    height, width = mask.shape}

\PYG{x}{    \PYGZsh{} Defining middle region of the mask}
\PYG{x}{    middle\PYGZus{}start = (width // 2) \PYGZhy{} (self.\PYGZus{}middle\PYGZus{}width // 2)}
\PYG{x}{    middle\PYGZus{}end = (width // 2) + (self.\PYGZus{}middle\PYGZus{}width // 2)}

\PYG{x}{    \PYGZsh{} Create a mask for the middle region and remove it from the original mask}
\PYG{x}{    middle\PYGZus{}mask = np.zeros\PYGZus{}like(mask)}
\PYG{x}{    middle\PYGZus{}mask[:, middle\PYGZus{}start:middle\PYGZus{}end] = 255}
\PYG{x}{    masked\PYGZus{}binary = cv2.bitwise\PYGZus{}and(mask, cv2.bitwise\PYGZus{}not(middle\PYGZus{}mask))}

\PYG{x}{    \PYGZsh{} Split the masked binary into left and right halves}
\PYG{x}{    left\PYGZus{}half = masked\PYGZus{}binary[:, :width // 2]}
\PYG{x}{    right\PYGZus{}half = masked\PYGZus{}binary[:, width // 2:]}

\PYG{x}{    \PYGZsh{} Count the black pixels in both halves}
\PYG{x}{    left\PYGZus{}pixels = np.sum(left\PYGZus{}half == 255)}
\PYG{x}{    right\PYGZus{}pixels = np.sum(right\PYGZus{}half == 255)}

\PYG{x}{    \PYGZsh{} Define a threshold for the number of black pixels to consider left or right}
\PYG{x}{    threshold\PYGZus{}lr = (self.\PYGZus{}black\PYGZus{}pixels // 3) \PYGZhy{} 20}

\PYG{x}{    \PYGZsh{} Check if the left or right region has sufficient black pixels}
\PYG{x}{    if left\PYGZus{}pixels \PYGZgt{} threshold\PYGZus{}lr:}
\PYG{x}{        onLeft = True}
\PYG{x}{    if right\PYGZus{}pixels \PYGZgt{} threshold\PYGZus{}lr:}
\PYG{x}{        onRight = True}

\PYG{x}{    return left\PYGZus{}pixels, right\PYGZus{}pixels, onLeft, onRight}

\end{Verbatim}
